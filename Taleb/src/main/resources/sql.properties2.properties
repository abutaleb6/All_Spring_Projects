sql.select.task= SELECT   TASK.id																AS id_task_key							\
						, TASK.created_on														AS dt_created							\
						, TASK_STS.key															AS tx_task_status						\
						, TASK.ref_no															AS tx_ref_id							\
						, TASK.customer_name													AS tx_remitter_name						\
						, CUST.code																AS id_remitter_acct_id					\
						, CUST.phone															AS tx_remitter_phone					\
																																		\
						, TASK.amount_in_local_currency 										AS dec_amt_lcy							\
						, TASK.amount_in_foreign_currency 										AS dec_amt_bdt							\
						, ((TASK.amount_in_local_currency + TASK.regular_fee) - TASK.discount) 	AS dec_total_due						\
																																		\
						, TASK.is_gateway_payment_done											AS is_paid								\
																																		\
						, TASK.beneficiary_name													AS tx_beneficiary_name					\
						, BEN.phone																AS tx_benificiary_phone					\
						, TASK.beneficiary_account_no											AS tx_benificiary_acct_id				\
						, TASK.beneficiary_bank													AS tx_benificiary_bank_name_orig		\
						, TASK.outlet_bank_id													AS id_benificiary_bank_key				\
						, UPPER(COALESCE(BANK.name, TASK.beneficiary_bank))						AS tx_benificiary_bank_name				\
						, UPPER(COALESCE(BRN.name, TASK.beneficiary_bank_branch))				AS tx_benificiary_branch_name			\
						, UPPER(COALESCE(DIST.name, TASK.beneficiary_district))					AS tx_benificiary_branch_district		\
																																		\
						, PMT_TYP.value 														AS id_payment_key						\
						, PMT_TYP.key 															AS tx_payment_type						\
																																		\
																																		\
						, TASK.pin_no															AS tx_pin_no							\
						, TASK.beneficiary_photo_id_type										AS tx_benificiary_identity_type			\
						, TASK.beneficiary_photo_id_no											AS tx_benificiary_identity_value		\
																																		\
						, :id_exchange_house_key 												AS id_exchange_house_key				\
						, :tx_exchange_house_id													AS tx_exchange_house_name				\
						, CTRY.id																AS id_country_from_key					\
						, TASK.to_currency_id													AS id_ccy_key_lcy						\
						, TASK.from_currency_id													AS id_ccy_key_bdt						\
																																		\
						, CASE																											\
							WHEN PMT_TYP.key  = 'Bank Deposit' 		THEN 80																\
							WHEN PMT_TYP.key  = 'Cash Collection' 	THEN 90																\
							ELSE NULL																									\
						  END																	AS id_instrument_key					\
						, COALESCE(NOTE.ct_note, 0) 											AS is_verify							\
																																		\
				FROM 		exh_task 			TASK																					\
				JOIN		system_entity		TASK_STS 	ON TASK_STS.id 	= TASK.current_status										\
				JOIN		country				CTRY		ON CTRY.code 	= 'UK'														\
				LEFT JOIN	system_entity 		PMT_TYP		ON PMT_TYP.id 	= TASK.payment_method										\
				LEFT JOIN	exh_customer		CUST		ON CUST.id 		= TASK.customer_id											\
				LEFT JOIN  	exh_beneficiary		BEN			ON BEN.id 		= TASK.beneficiary_id										\
				LEFT JOIN	bank				BANK 		ON BANK.id 		= TASK.outlet_bank_id										\
				LEFT JOIN	bank_branch			BRN 		ON BRN.id 		= TASK.outlet_branch_id										\
				LEFT JOIN	district			DIST		ON DIST.id 		= TASK.outlet_district_id									\
																																		\
				WHERE	CAST(TASK.created_on as Date) 	>= :fromDate																	\
				AND		CAST(TASK.created_on as Date) 	<= :toDate																		\
				AND		TASK.current_status 			= COALESCE(:taskStatus, TASK.current_status)

sql.update.task = 	UPDATE	exh_task 											\
					SET	  	  version			= version + 1					\
							, user_id			= :id_user_key					\
							, current_status	= :id_new_status_key			\
					WHERE	id = :id_task_key

sql.select.note = 	SELECT	  NOTE.id 			AS id_note_key					\
							, NOTE.entity_id 	AS id_task_key					\
							, NOTE.created_by	AS id_user_key					\
							, USR.login_id		AS tx_login_id					\
							, NOTE.created_on	AS dt_created					\
							, NOTE.note			AS tx_note 						\
					FROM	entity_note	NOTE									\
					JOIN	app_user	USR	ON USR.id = NOTE.created_by			\
					WHERE	NOTE.entity_id = :id_task_key						\
					ORDER	BY  dt_created desc


sql.insert.note =	INSERT INTO	entity_note					\
					(										\
						  id								\
						, version							\
						, company_id						\
						, created_by						\
						, created_on						\
						, entity_id							\
						, entity_type_id					\
						, note								\
						, plugin_id							\
						, updated_by						\
						, updated_on						\
						, entity_note_type_id				\
					)										\
					VALUES									\
					(										\
						  nextval('entity_note_id_seq')		\
						, 0									\
						, :id_exchange_house_key			\
						, :id_user_key						\
						, NOW()								\
						, :id_task_key						\
						, 1301								\
						, :tx_note							\
						, 9									\
						, 0									\
						, null								\
						, 10015								\
					)


sql.select.task.bd = SELECT	  T.transaction_ref_no 	AS tx_ref_id			\
							, STS.label 			AS tx_task_status  		\
				FROM 	task_info	T										\
				JOIN	task_status	STS ON STS.id = T.current_status		\
				WHERE 	transaction_ref_no 	= :tx_ref_id 					\
				AND 	exchange_house_id 	= :id_exchange_house_key


sql.insert.task.bd = 	INSERT INTO task_info					\
					(											\
						  id									\
						, version								\
						, account_number						\
						, amount								\
						, amount_in_local_currency				\
						, beneficiary_name						\
						, beneficiary_phone						\
						, country_id							\
						, created_on							\
						, currency_id							\
						, current_status						\
						, exchange_house_id						\
						, identity_type							\
						, identity_no							\
						, instrument							\
						, local_currency_id						\
						, locked								\
						, mapping_bank_id						\
						, outlet_branch_name					\
						, outlet_district_name					\
						, outlet_name							\
						, payment_method						\
						, pin_no								\
						, revised								\
						, sender_mobile							\
						, sender_name							\
						, status_updated						\
						, transaction_ref_no					\
						, value_date							\
					)											\
					VALUES										\
					(											\
						  nextval('task_info_id_seq')			\
						, 0										\
						, :tx_benificiary_acct_id				\
						, :dec_amt_bdt							\
						, :dec_amt_lcy							\
						, :tx_beneficiary_name					\
						, :tx_benificiary_phone					\
						, :id_country_from_key					\
						, NOW()									\
						, :id_ccy_key_bdt						\
						, 10									\
						, :id_exchange_house_key				\
						, :tx_benificiary_identity_type			\
						, :tx_benificiary_identity_value		\
						, null	/* id_instrument_key */			\
						, :id_ccy_key_lcy						\
						, FALSE									\
						, :id_benificiary_bank_key				\
						, :tx_benificiary_branch_name			\
						, :tx_benificiary_branch_district		\
						, :tx_benificiary_bank_name				\
						, :id_payment_key						\
						, :tx_pin_no							\
						, FALSE									\
						, :tx_remitter_phone					\
						, :tx_remitter_name						\
						, NOW()									\
						, :tx_ref_id							\
						, :dt_created							\
					)







// Task Status Tab to show status of Task ONLY, so no buttons
// WHEN send to Bank is clicked and IF is_verify = 1 - Pop up box to enter comment with button verify & send & cancel



// With CC & & SEBL
	ANY BRANCH
	ANY DISTRICT


CREATE TASK LIST

INSERT INTO task_list
(
	  id
	, version
	, created_by_id
	, date_created
	, exchange_house_id
	, locked
	, name
	, parent_list_id
	, total_amount
	, total_task_count
)
VALUES
(
	  nextval('task_list_id_seq')
	, 0
	, 1
	, :id_exchange_house_key
	, 1
	, :tx_task_name
	, null
	, null
	, null
)

INSERT INTO task_info
task_list_id
instrument			= 90
mapping_bank		= 16
mapping_branch		= -10
mapping_district	= -10
previous_status		= NULL
process				= 3
commission			= 0
transaction_id		= nextval('arms_transaction_id_seq')




TASK NAME SEBL-CC-20150601/1640
2
select TLIST.name from task_list TLIST
where TLIST.exchange_house_id = 100
AND TLIST.id = (SELECT MAX(id) FROM  task_list WHERE exchange_house_id = 100)

SPLIT by - and then /
add one to the account_number
